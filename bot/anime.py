import io
import random
import discord
import requests
from discord.ext import commands

# C·∫•u h√¨nh
ERROR_CHANNEL_ID = 1375700436593672222  # Thay b·∫±ng ID channel b√°o l·ªói th·ª±c t·∫ø
MAX_FILE_SIZE_MB = 8  # Discord free tier limit (ho·∫∑c 25 cho Nitro)
MAX_RETRIES = 5  # S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa

def register_anime(bot: commands.Bot):
    @bot.tree.command(name="anime", description="G·ª≠i video anime ng·∫´u nhi√™n")
    async def anime(interaction: discord.Interaction):
        # X√°c nh·∫≠n t∆∞∆°ng t√°c ngay ƒë·ªÉ ƒë∆∞·ª£c th√™m th·ªùi gian x·ª≠ l√Ω.
        await interaction.response.defer()
        
        error_channel = bot.get_channel(ERROR_CHANNEL_ID)
        
        try:
            with open("bot/url/anime.txt", "r", encoding="utf-8") as f:
                video_urls = [line.strip() for line in f if line.strip()]
            
            if not video_urls:
                error_msg = "‚ùå Danh s√°ch video anime tr·ªëng!"
                if error_channel:
                    await error_channel.send(f"**L·ªói Bot Anime:** {error_msg}")
                return await interaction.followup.send("Danh s√°ch video ch∆∞a c√≥ d·ªØ li·ªáu!")
            
            headers = {
                "User-Agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/98.0.4758.102 Safari/537.36"
                )
            }
            
            used_urls = []  # L∆∞u c√°c URL ƒë√£ th·ª≠
            retry_count = 0
            
            while retry_count < MAX_RETRIES and len(used_urls) < len(video_urls):
                # Ch·ªçn URL ch∆∞a th·ª≠
                available_urls = [url for url in video_urls if url not in used_urls]
                if not available_urls:
                    break
                    
                selected_video_url = random.choice(available_urls)
                used_urls.append(selected_video_url)
                retry_count += 1
                
                try:
                    # Ki·ªÉm tra k√≠ch th∆∞·ªõc file tr∆∞·ªõc khi t·∫£i
                    head_resp = requests.head(selected_video_url, headers=headers, timeout=10)
                    
                    if head_resp.status_code != 200:
                        # B√°o l·ªói URL kh√¥ng ho·∫°t ƒë·ªông
                        if error_channel:
                            await error_channel.send(
                                f"**URL Anime L·ªói (HEAD):** {selected_video_url}\n"
                                f"Status Code: {head_resp.status_code}\n"
                                f"User: {interaction.user.mention} ({interaction.user.id})"
                            )
                        continue
                    
                    # L·∫•y k√≠ch th∆∞·ªõc file
                    content_length = head_resp.headers.get('Content-Length')
                    if content_length:
                        file_size_mb = int(content_length) / (1024 * 1024)
                        
                        if file_size_mb > MAX_FILE_SIZE_MB:
                            # B√°o l·ªói file qu√° l·ªõn
                            if error_channel:
                                await error_channel.send(
                                    f"**URL Anime Qu√° L·ªõn:** {selected_video_url}\n"
                                    f"K√≠ch th∆∞·ªõc: {file_size_mb:.2f}MB (> {MAX_FILE_SIZE_MB}MB)\n"
                                    f"User: {interaction.user.mention} ({interaction.user.id})"
                                )
                            continue
                    
                    # T·∫£i file n·∫øu k√≠ch th∆∞·ªõc ph√π h·ª£p
                    resp = requests.get(selected_video_url, headers=headers, timeout=30)
                    resp.raise_for_status()
                    
                    # Ki·ªÉm tra k√≠ch th∆∞·ªõc th·ª±c t·∫ø khi t·∫£i xong
                    actual_size_mb = len(resp.content) / (1024 * 1024)
                    if actual_size_mb > MAX_FILE_SIZE_MB:
                        if error_channel:
                            await error_channel.send(
                                f"**URL Anime Qu√° L·ªõn (Th·ª±c t·∫ø):** {selected_video_url}\n"
                                f"K√≠ch th∆∞·ªõc th·ª±c: {actual_size_mb:.2f}MB (> {MAX_FILE_SIZE_MB}MB)\n"
                                f"User: {interaction.user.mention} ({interaction.user.id})"
                            )
                        continue
                    
                    # X√°c ƒë·ªãnh ph·∫ßn m·ªü r·ªông file
                    content_type = resp.headers.get("Content-Type", "")
                    ext = ("webm" if "video/webm" in content_type 
                           else "ogg" if "video/ogg" in content_type 
                           else "mp4")
                    
                    # G·ª≠i file th√†nh c√¥ng
                    video_file = discord.File(io.BytesIO(resp.content), filename=f"anime_video.{ext}")
                    await interaction.followup.send(
                        f"üé¨ Video anime cho {interaction.user.mention} (K√≠ch th∆∞·ªõc: {actual_size_mb:.2f}MB):", 
                        file=video_file
                    )
                    
                    # Ghi log th√†nh c√¥ng n·∫øu c·∫ßn
                    if error_channel and retry_count > 1:
                        await error_channel.send(
                            f"**Anime Bot - Th√†nh c√¥ng sau {retry_count} l·∫ßn th·ª≠**\n"
                            f"URL: {selected_video_url}\n"
                            f"User: {interaction.user.mention} ({interaction.user.id})"
                        )
                    
                    return  # Th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
                    
                except requests.exceptions.RequestException as e:
                    # B√°o l·ªói k·∫øt n·ªëi/t·∫£i file
                    if error_channel:
                        await error_channel.send(
                            f"**URL Anime L·ªói K·∫øt N·ªëi:** {selected_video_url}\n"
                            f"L·ªói: {str(e)}\n"
                            f"User: {interaction.user.mention} ({interaction.user.id})"
                        )
                    continue
                
                except Exception as e:
                    # B√°o l·ªói kh√°c
                    if error_channel:
                        await error_channel.send(
                            f"**URL Anime L·ªói Kh√°c:** {selected_video_url}\n"
                            f"L·ªói: {str(e)}\n"
                            f"User: {interaction.user.mention} ({interaction.user.id})"
                        )
                    continue
            
            # N·∫øu ƒë√£ th·ª≠ h·∫øt m√† kh√¥ng th√†nh c√¥ng
            error_msg = f"Kh√¥ng th·ªÉ t√¨m video ph√π h·ª£p sau {retry_count} l·∫ßn th·ª≠!"
            if error_channel:
                await error_channel.send(
                    f"**Anime Bot - Th·∫•t b·∫°i ho√†n to√†n**\n"
                    f"ƒê√£ th·ª≠ {retry_count} URLs\n"
                    f"User: {interaction.user.mention} ({interaction.user.id})\n"
                    f"URLs ƒë√£ th·ª≠: {', '.join(used_urls[:3])}{'...' if len(used_urls) > 3 else ''}"
                )
            
            await interaction.followup.send(
                "‚ùå Kh√¥ng th·ªÉ t·∫£i video anime l√∫c n√†y. "
                "T·∫•t c·∫£ video hi·ªán t·∫°i ƒë·ªÅu qu√° l·ªõn ho·∫∑c c√≥ l·ªói. "
                "Vui l√≤ng th·ª≠ l·∫°i sau!"
            )
            
        except FileNotFoundError:
            error_msg = "File anime.txt kh√¥ng t·ªìn t·∫°i!"
            if error_channel:
                await error_channel.send(f"**L·ªói Bot Anime - File:** {error_msg}")
            await interaction.followup.send("‚ùå L·ªói h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá admin!")
            
        except Exception as e:
            # L·ªói kh√¥ng mong mu·ªën
            if error_channel:
                await error_channel.send(
                    f"**L·ªói Bot Anime - System:**\n"
                    f"L·ªói: {str(e)}\n"
                    f"User: {interaction.user.mention} ({interaction.user.id})"
                )
            await interaction.followup.send("‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën!")