import os
import json
import asyncio
import discord
import logging
from datetime import datetime
from discord.ext import commands
from discord import app_commands

# C·∫•u h√¨nh h·ªá th·ªëng
CONFIG = {
    "vip_file": "bot/spam/vip.json",           # File l∆∞u danh s√°ch VIP
    "admin_ids": [849989363387596840],         # Danh s√°ch ID admin (c√≥ th·ªÉ th√™m nhi·ªÅu)
    "error_channel_id": 1377693583741812867,   # K√™nh g·ª≠i th√¥ng b√°o l·ªói
    "cooldown": 60,                            # Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn spam (gi√¢y)
    "max_loops": 50,                           # S·ªë loop t·ªëi ƒëa cho m·ªói l·∫ßn spam
    "max_concurrent": 3,                       # S·ªë ti·∫øn tr√¨nh ƒë·ªìng th·ªùi t·ªëi ƒëa
    "timeout_per_loop": 60                     # Th·ªùi gian timeout cho m·ªói loop (gi√¢y)
}

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i
spam_processes = {}    # L∆∞u c√°c ti·∫øn tr√¨nh SMS ƒëang ch·∫°y
last_spam_time = {}    # L∆∞u th·ªùi gian spam cu·ªëi c·ªßa t·ª´ng user

# T·∫Øt logging console, ch·ªâ d√πng ƒë·ªÉ g·ª≠i l·ªói qua Discord
logging.getLogger().setLevel(logging.CRITICAL)  # T·∫Øt h·∫ßu h·∫øt log console

def load_vip_data():
    """ƒê·ªçc d·ªØ li·ªáu VIP t·ª´ file JSON"""
    try:
        os.makedirs(os.path.dirname(CONFIG["vip_file"]), exist_ok=True)
        with open(CONFIG["vip_file"], "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_vip_data(data):
    """L∆∞u d·ªØ li·ªáu VIP v√†o file JSON"""
    os.makedirs(os.path.dirname(CONFIG["vip_file"]), exist_ok=True)
    with open(CONFIG["vip_file"], "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def is_admin(user_id):
    """Ki·ªÉm tra user c√≥ ph·∫£i admin kh√¥ng"""
    return user_id in CONFIG["admin_ids"]

def is_vip(user_id):
    """Ki·ªÉm tra user c√≥ ph·∫£i VIP kh√¥ng"""
    return str(user_id) in load_vip_data()

def validate_phone(phone):
    """Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i (10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0)"""
    return len(phone) == 10 and phone.startswith("0") and phone.isdigit()

async def check_cooldown(user_id):
    """Ki·ªÉm tra th·ªùi gian ch·ªù c·ªßa user"""
    if user_id in last_spam_time:
        elapsed = (datetime.now() - last_spam_time[user_id]).total_seconds()
        if elapsed < CONFIG["cooldown"]:
            return int(CONFIG["cooldown"] - elapsed)
    return 0

async def cleanup_process(user_id):
    """D·ªçn d·∫πp ti·∫øn tr√¨nh c·ªßa user"""
    if user_id in spam_processes:
        process = spam_processes.pop(user_id)
        if process.returncode is None:
            try:
                process.terminate()  # D·ª´ng ti·∫øn tr√¨nh nh·∫π nh√†ng
                await asyncio.wait_for(process.wait(), timeout=3)
            except asyncio.TimeoutError:
                process.kill()  # Bu·ªôc d·ª´ng n·∫øu kh√¥ng t·ª± d·ª´ng
            except Exception:
                pass  # B·ªè qua l·ªói cleanup

def create_embed(title, phone, loops, status, color):
    """T·∫°o embed message th·ªëng nh·∫•t"""
    return discord.Embed(
        title=title,
        description=f"**üì± SƒêT:** {phone}\n**üçÉ Loops:** {loops:,}\n**üìä Tr·∫°ng th√°i:** {status}",
        color=color
    )

async def send_error_to_channel(bot, error_msg, user_id=None):
    """G·ª≠i th√¥ng b√°o l·ªói v·ªÅ k√™nh Discord thay v√¨ console"""
    try:
        channel = bot.get_channel(CONFIG["error_channel_id"])
        if channel:
            error_embed = discord.Embed(
                title="üö® L·ªói h·ªá th·ªëng",
                description=f"**L·ªói:** {error_msg}\n**User ID:** {user_id if user_id else 'Kh√¥ng x√°c ƒë·ªãnh'}\n**Th·ªùi gian:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}",
                color=discord.Color.red()
            )
            await channel.send(embed=error_embed)
    except Exception:
        pass  # Tr√°nh l·ªói k√©p n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c

def register_smsvip(bot):
    @bot.tree.command(name="add", description="Th√™m VIP (Ch·ªâ Admin)")
    async def add_vip(interaction: discord.Interaction, user: discord.Member):
        # Ki·ªÉm tra quy·ªÅn admin
        if not is_admin(interaction.user.id):
            return await interaction.response.send_message("‚ùå Kh√¥ng c√≥ quy·ªÅn!", ephemeral=True)
        
        vip_data = load_vip_data()
        if str(user.id) in vip_data:
            return await interaction.response.send_message(f"‚úÖ {user.mention} ƒë√£ l√† VIP!", ephemeral=True)
        
        # Th√™m VIP v√† l∆∞u file
        vip_data[str(user.id)] = user.name
        save_vip_data(vip_data)
        await interaction.response.send_message(f"‚úÖ ƒê√£ th√™m {user.mention} v√†o VIP!")

    @bot.tree.command(name="smsvip", description="SMS spam (Ch·ªâ VIP)")
    @app_commands.describe(phone="SƒêT (10 s·ªë, b·∫Øt ƒë·∫ßu 0)", loops="S·ªë l·∫ßn (1-50)")
    async def spam_sms(interaction: discord.Interaction, phone: str, loops: int):
        user_id = interaction.user.id
        
        # Ki·ªÉm tra quy·ªÅn VIP
        if not is_vip(user_id):
            return await interaction.response.send_message("‚ùå Ch·ªâ VIP!", ephemeral=True)
        
        # Ki·ªÉm tra th·ªùi gian ch·ªù
        remaining = await check_cooldown(user_id)
        if remaining:
            return await interaction.response.send_message(f"‚ùå Ch·ªù {remaining}s!", ephemeral=True)
        
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
        if not validate_phone(phone):
            return await interaction.response.send_message("‚ùå SƒêT kh√¥ng h·ª£p l·ªá!", ephemeral=True)
        
        # Ki·ªÉm tra s·ªë l·∫ßn spam
        if not (1 <= loops <= CONFIG["max_loops"]):
            return await interaction.response.send_message(f"‚ùå Loops: 1-{CONFIG['max_loops']}!", ephemeral=True)
        
        # Ki·ªÉm tra s·ªë ti·∫øn tr√¨nh ƒë·ªìng th·ªùi
        if len(spam_processes) >= CONFIG["max_concurrent"]:
            return await interaction.response.send_message("‚ùå H·ªá th·ªëng ƒëang b·∫≠n!", ephemeral=True)
        
        # Ki·ªÉm tra file script c√≥ t·ªìn t·∫°i
        if not os.path.exists("bot/spam/smsvip.py"):
            return await interaction.response.send_message("‚ùå Script kh√¥ng t·ªìn t·∫°i!", ephemeral=True)

        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh spam
        last_spam_time[user_id] = datetime.now()
        embed = create_embed("üöÄ SMS VIP", phone, loops, "‚è≥ ƒêang x·ª≠ l√Ω...", discord.Color.green())
        await interaction.response.send_message(embed=embed)
        message = await interaction.original_response()

        try:
            # D·ªçn d·∫πp ti·∫øn tr√¨nh c≈© n·∫øu c√≥
            await cleanup_process(user_id)
            
            # T·∫°o ti·∫øn tr√¨nh m·ªõi ƒë·ªÉ ch·∫°y script SMS
            process = await asyncio.create_subprocess_exec(
                "python3", "bot/spam/smsvip.py", phone, str(loops),
                stdout=asyncio.subprocess.DEVNULL,  # T·∫Øt output
                stderr=asyncio.subprocess.PIPE      # L·∫•y l·ªói ƒë·ªÉ g·ª≠i Discord
            )
            spam_processes[user_id] = process

            # Ch·ªù ti·∫øn tr√¨nh ho√†n th√†nh v·ªõi timeout
            timeout = loops * CONFIG["timeout_per_loop"]
            try:
                returncode = await asyncio.wait_for(process.wait(), timeout=timeout)
                # Ki·ªÉm tra k·∫øt qu·∫£
                if returncode == 0:
                    status = "‚úÖ Th√†nh c√¥ng!"
                    color = discord.Color.blue()
                else:
                    status = f"‚ùå L·ªói ({returncode})"
                    color = discord.Color.red()
                    # G·ª≠i l·ªói v·ªÅ k√™nh Discord
                    stderr_output = await process.stderr.read()
                    if stderr_output:
                        await send_error_to_channel(bot, f"SMS process error: {stderr_output.decode()}", user_id)
            except asyncio.TimeoutError:
                # Timeout = coi nh∆∞ th√†nh c√¥ng (ƒë√£ ch·∫°y ƒë·ªß th·ªùi gian)
                process.terminate()
                status = "‚úÖ Ho√†n th√†nh!"
                color = discord.Color.blue()

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªëi
            final_embed = create_embed("üöÄ SMS VIP", phone, loops, status, color)
            await message.edit(embed=final_embed)

        except Exception as e:
            # G·ª≠i l·ªói v·ªÅ k√™nh Discord thay v√¨ console
            await send_error_to_channel(bot, f"SMS command error: {str(e)}", user_id)
            error_embed = create_embed("‚ùå SMS VIP", phone, loops, f"‚ùå L·ªói: {str(e)}", discord.Color.red())
            try:
                await message.edit(embed=error_embed)
            except:
                await interaction.followup.send(f"‚ùå L·ªói: {str(e)}", ephemeral=True)
        finally:
            # Lu√¥n d·ªçn d·∫πp ti·∫øn tr√¨nh khi k·∫øt th√∫c
            await cleanup_process(user_id)

    @bot.tree.command(name="stop", description="D·ª´ng SMS")
    async def stop_spam(interaction: discord.Interaction):
        user_id = interaction.user.id
        
        # Ki·ªÉm tra c√≥ ti·∫øn tr√¨nh ƒëang ch·∫°y kh√¥ng
        if user_id not in spam_processes:
            return await interaction.response.send_message("‚ùå Kh√¥ng c√≥ ti·∫øn tr√¨nh n√†o!", ephemeral=True)
        
        try:
            await cleanup_process(user_id)
            await interaction.response.send_message("‚úÖ ƒê√£ d·ª´ng!", ephemeral=True)
        except Exception as e:
            # G·ª≠i l·ªói v·ªÅ Discord
            await send_error_to_channel(bot, f"Stop command error: {str(e)}", user_id)
            await interaction.response.send_message(f"‚ùå L·ªói: {str(e)}", ephemeral=True)

    @bot.tree.command(name="status", description="Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng (Admin)")
    async def system_status(interaction: discord.Interaction):
        # Ch·ªâ admin m·ªõi xem ƒë∆∞·ª£c
        if not is_admin(interaction.user.id):
            return await interaction.response.send_message("‚ùå Kh√¥ng c√≥ quy·ªÅn!", ephemeral=True)
        
        # Th·ªëng k√™ h·ªá th·ªëng
        vip_count = len(load_vip_data())
        active_processes = len(spam_processes)
        
        status_embed = discord.Embed(
            title="üìä Tr·∫°ng th√°i h·ªá th·ªëng",
            description=(
                f"**üë• S·ªë VIP:** {vip_count}\n"
                f"**‚ö° Ti·∫øn tr√¨nh ƒëang ch·∫°y:** {active_processes}/{CONFIG['max_concurrent']}\n"
                f"**‚öôÔ∏è Max Loops:** {CONFIG['max_loops']}\n"
                f"**‚è∞ Th·ªùi gian ch·ªù:** {CONFIG['cooldown']}s\n"
                f"**üîß Timeout/loop:** {CONFIG['timeout_per_loop']}s"
            ),
            color=discord.Color.blue()
        )
        await interaction.response.send_message(embed=status_embed, ephemeral=True)

    @bot.tree.command(name="viplist", description="Xem danh s√°ch VIP (Admin)")
    async def vip_list(interaction: discord.Interaction):
        # Ch·ªâ admin m·ªõi xem ƒë∆∞·ª£c
        if not is_admin(interaction.user.id):
            return await interaction.response.send_message("‚ùå Kh√¥ng c√≥ quy·ªÅn!", ephemeral=True)
        
        vip_data = load_vip_data()
        if not vip_data:
            return await interaction.response.send_message("üìù Ch∆∞a c√≥ VIP n√†o!", ephemeral=True)
        
        # T·∫°o danh s√°ch VIP
        vip_list_text = ""
        for user_id, username in vip_data.items():
            vip_list_text += f"‚Ä¢ <@{user_id}> ({username})\n"
        
        # Chia nh·ªè n·∫øu qu√° d√†i (Discord limit 4096 chars)
        if len(vip_list_text) > 3900:
            vip_list_text = vip_list_text[:3900] + "\n... (v√† nhi·ªÅu h∆°n)"
        
        vip_embed = discord.Embed(
            title="üë• Danh s√°ch VIP",
            description=vip_list_text,
            color=discord.Color.gold()
        )
        await interaction.response.send_message(embed=vip_embed, ephemeral=True)
